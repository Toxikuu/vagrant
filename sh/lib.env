#!/usr/bin/env false
#shellcheck shell=bash

CURL="curl -fsSL --connect-timeout=8 --retry=4 --retry-delay=2"

# query the github api
ghapi() {
    $CURL \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "$@"
}

# fetch latest github release that isn't a pre-release. if no releases are
# present, fall back to tags with `gr`.
ghr() {
    url="https://api.github.com/repos/${shortform:?}/releases?per_page=10&page=1"
    ver="$(ghapi "$url" | jq -r 'first(.[] | select(.prerelease == false)).tag_name')"

    if [ -z "$ver" ]; then
        ver="$(gr | vfs | vtrim | vsort)"
    fi

    printf "%s" "$ver"
}

# fetch latest github commit
ghc() {
    url="https://api.github.com/repos/${shortform:?}/commits?per_page=1&page=1"
    ghapi "$url" | jq -r ".[0].sha"
}

# retrieve latest commit
githead() {
    git ls-remote "${upstream:?}" HEAD | cut -f1
}

# lowercase input
tolower() {
    tr '[:upper:]' '[:lower:]'
}

# uppercase input
toupper() {
    tr '[:lower:]' '[:upper:]'
}

# git list remote tags
gr() {
    git ls-remote --tags --refs "${upstream:?}" | sed "s,.*/,,"
}

# version filter stable
vfs() {
    grep -Eiv "rc|dev|beta|alpha|pre|${1:-DUMMY}"
}

# trim versions
vtrim() {
    sed -e "s,^${name:?}[-_],," \
        -e "s,^release[-_],," \
        -e "s,^v,," \
        "$@"
}

# version filter even minor
vfem() {
    awk -F. '/[0-9]+\.[0-9]+\.[0-9]+/ { if ($2 % 2 == 0) print }'
}

# grep for a three-part version
v3grep() {
    grep -E '[0-9]+\.[0-9]+\.[0-9]+'
}

# prepend dashes to prerelease labels that may be missing them
predash() {
    sed -E \
        -e 's,([0-9])(pre),\1-\2,'   \
        -e 's,([0-9])(rc),\1-\2,'    \
        -e 's,([0-9])(dev),\1-\2,'   \
        -e 's,([0-9])(alpha),\1-\2,' \
        -e 's,([0-9])(beta),\1-\2,'
}

# filter out lines starting with letters
fsl() {
    grep -v '^[a-zA-Z]'
}

# filter out lines with letters
fl() {
    grep -v '[a-zA-Z]'
}

# filter out lines containing no digits
fnd() {
    grep '[0-9]'
}

# filter out lines with dates
fdate() {
    grep -Ev '[0-9]{4}-[0-9]{2}-[0-9]{2}'
}

# filter out lines that consist only of dates
ffdate() {
    grep -Ev '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
}

# private helper function to weigh semvers
_version_weight() {
    printf '%s\n' $1 |
    sed -r \
        -e 's:\+.*$::' \
        -e 's:^v::' \
        -e 's:^[0-9]+(\.[0-9]+)+$:&-stable:' \
        -e 's:([^A-Za-z])dev\.?([^A-Za-z]|$):\1.10.\2:g' \
        -e 's:([^A-Za-z])(alpha|a)\.?([^A-Za-z]|$):\1.20.\3:g' \
        -e 's:([^A-Za-z])(beta|b)\.?([^A-Za-z]|$):\1.30.\3:g' \
        -e 's:([^A-Za-z])(rc|RC)\.?([^A-Za-z]|$)?:\1.40.\3:g' \
        -e 's:([^A-Za-z])stable\.?([^A-Za-z]|$):\1.50.\2:g' \
        -e 's:([^A-Za-z])pl\.?([^A-Za-z]|$):\1.60.\2:g' \
        -e 's:([^A-Za-z])(patch|p)\.?([^A-Za-z]|$):\1.70.\3:g' \
        -e 's:\.{2,}:.:' \
        -e 's:\.$::' \
        -e 's:-\.:.:'
}

# version sort
vsort() {
    if [ -t 0 ]; then
      versions_list=$@
    else
      versions_list=$(cat)
    fi

    tags_orig=(${versions_list})
    tags_weight=( $(_version_weight "${tags_orig[*]}") )

    keys=$(for ix in ${!tags_weight[*]}; do
        printf "%s+%s\n" "${tags_weight[${ix}]}" ${ix}
    done | sort -V | cut -d+ -f2)

    for ix in ${keys}; do
        printf "%s\n" ${tags_orig[${ix}]}
    done
}

# curl upstream
cr() {
    $CURL "${upstream:?}"
}

# curl automated
#
# if no arguments are passed, match two or three points
# match {2,3} points with -{2,3}
ca() {
    local pts=0
    while getopts "23" opt; do
        case $opt in
            2) pts=2 ;;
            3) pts=3 ;;
        esac
    done
    shift $((OPTIND -1))

    case $pts in
        0) cr | grep -oP -- "$name-[0-9]+\.[0-9]+(\.[0-9]+)?" ;;
        2) cr | grep -oP -- "$name-[0-9]+\.[0-9]+" ;;
        3) cr | grep -oP -- "$name-[0-9]+\.[0-9]+\.[0-9]+" ;;
    esac
}

# get version from arch packages or aur (upstream should be the arch package
# page)
archver() {
    if echo "$upstream" | grep -F 'aur.archlinux.org'; then
        cr | jq -r '.Version' | cut -d- -f1
    else
        cr | jq -r '.pkgver'
    fi
}
